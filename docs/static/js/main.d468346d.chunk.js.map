{"version":3,"sources":["components/Modal/ModalWinner.js","components/Header/Header.js","components/Container/Container.js","components/Footer/Footer.js","helpers/winnerPosibilities.js","App.js","index.js"],"names":["ModalWinner","_ref","handleReset","winner","modalSymbolsClasses","classNames","symbol-x","symbol-o","react_default","a","createElement","className","onClick","Header","selected","Container","list","winnerState","cellsSelected","handleClick","pattern","map","l","index","key","winnerClass","includes","cell","winner-cell-o","winner-cell-x","Footer","counter","cross","ties","circle","winnerPossibilities","horizontal","vertical","diagonal","Array","fill","initialCounter","initialWinner","App","_useState","useState","_useState2","Object","slicedToArray","setCellsSelected","_useState3","_useState4","setSelected","_useState5","_useState6","setCounter","_useState7","_useState8","setWinnerState","all","objectSpread2","useEffect","handleCount","Fragment","components_Header_Header","components_Container_Container","i","localCells","toConsumableArray","cells","setWinner","forEach","getWinner","components_Footer_Footer","Modal_ModalWinner","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d468346d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport './modalWinner.css';\r\n\r\nconst ModalWinner = ({handleReset, winner}) => {\r\n\r\n    const modalSymbolsClasses = classNames({\r\n        'symbol-x': winner === 'x',\r\n        'symbol-o': winner === 'o'\r\n    })\r\n\r\n    return (\r\n        <div className='modal'>\r\n            <div className='modal-content'>\r\n                <div className='modal-header'>\r\n                    <h6>you won!</h6>\r\n                </div>\r\n\r\n                <div className={classNames('modal-body', modalSymbolsClasses)}>\r\n                    <span>{winner}</span>\r\n                    <span>takes the round</span>\r\n                </div>\r\n\r\n                <div className='modal-footer'>\r\n                    <button onClick={() => handleReset(true)}>quit</button>\r\n                    <button\r\n                        className={modalSymbolsClasses}\r\n                        onClick={() => handleReset(false)}\r\n                    >\r\n                        next round\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalWinner;","import React from \"react\";\r\nimport './header.css';\r\n\r\nconst Header = ({ selected, handleReset }) => {\r\n    return (\r\n        <div className=\"header\">\r\n            <div>\r\n                <span>x</span>\r\n                <span>o</span>\r\n            </div>\r\n\r\n            <button className='turn'>\r\n                <span>{selected}</span> turn\r\n            </button>\r\n\r\n            <button className='reset' onClick={handleReset}>\r\n                <i className=\"fa-solid fa-arrow-rotate-right\"/>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport './container.css';\r\n\r\nconst Container = ({ list, winnerState, cellsSelected, handleClick}) => {\r\n\r\n    const {winner, pattern} = winnerState;\r\n\r\n    const cellClasses = (winnerClass) => classNames({\r\n        cell: 'cell',\r\n        'winner-cell-o': winnerClass && winner === 'o',\r\n        'winner-cell-x': winnerClass && winner === 'x'\r\n    })\r\n\r\n    const symbolClasses = (cell) => classNames({\r\n        'symbol-x': cell === 'x',\r\n        'symbol-o': cell === 'o'\r\n    })\r\n\r\n    return (\r\n        <div className='container'>\r\n            {\r\n                list.map((l, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className={cellClasses(pattern.includes(index))}\r\n                        onClick={() => handleClick(index)}\r\n                    >\r\n                        <span className={symbolClasses(cellsSelected[index])}>\r\n                            {cellsSelected[index]}\r\n                        </span>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Container;","import React from \"react\";\r\nimport './footer.css';\r\n\r\nconst Footer = ({counter}) => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div>\r\n                <h6>x (you)</h6>\r\n                <span>{counter.cross}</span>\r\n            </div>\r\n\r\n            <div>\r\n                <h6>Ties</h6>\r\n                <span>{counter.ties}</span>\r\n            </div>\r\n\r\n            <div>\r\n                <h6>o (cpu)</h6>\r\n                <span>{counter.circle}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","const winnerPossibilities = {\r\n    horizontal: [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n    ],\r\n\r\n    vertical: [\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n    ],\r\n\r\n    diagonal: [\r\n        [6, 4, 2],\r\n        [0, 4, 8]\r\n    ]\r\n}\r\n\r\nexport const getWinner = (cells, setWinner) => {\r\n    for (let i in winnerPossibilities) {\r\n        winnerPossibilities[i].forEach(pattern => {\r\n            if (\r\n                cells[pattern[0]] === '' ||\r\n                cells[pattern[1]] === '' ||\r\n                cells[pattern[2]] === ''\r\n            ) return\r\n\r\n            if (cells[pattern[0]] === cells[pattern[1]] && cells[pattern[1]] === cells[pattern[2]]) {\r\n                setWinner({\r\n                    winner: cells[pattern[0]],\r\n                    pattern\r\n                })\r\n            }\r\n        })\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\nimport ModalWinner from \"./components/Modal/ModalWinner\";\nimport Header from \"./components/Header/Header\";\nimport Container from \"./components/Container/Container\";\nimport Footer from \"./components/Footer/Footer\";\nimport { getWinner } from \"./helpers/winnerPosibilities\";\n\nconst list = new Array(9).fill('');\nconst initialCounter = { cross: 0, circle: 0, ties: 0 };\nconst initialWinner = { winner: null, pattern: [] };\n\nconst App = () => {\n    const [cellsSelected, setCellsSelected] = useState(list);\n    const [selected, setSelected] = useState('x');\n    const [counter, setCounter] = useState(initialCounter);\n    const [winnerState, setWinnerState] = useState(initialWinner);\n\n    const { winner } = winnerState;\n\n    const handleCount = () => {\n\n        const {cross, circle, ties} = counter;\n\n        if (winner) {\n            if (selected === 'o')\n                setCounter({...counter, cross: cross + 1, ties: ties + 1});\n            else\n                setCounter({...counter, circle: circle + 1, ties: ties + 1});\n        }\n    }\n\n    const handleReset = (all) => {\n        setWinnerState({...winnerState, winner: null });\n        setSelected('x');\n        setCellsSelected(list);\n        if (all) setCounter(initialCounter)\n    }\n\n    const handleClick = (i) => {\n        const localCells = [...cellsSelected];\n\n        if (cellsSelected[i] !== '') return;\n\n        if (selected === 'x') {\n            localCells[i] = 'x';\n            setSelected('o')\n        } else {\n            localCells[i] = 'o';\n            setSelected('x')\n        }\n\n        getWinner(localCells, setWinnerState);\n        setCellsSelected(localCells)\n    }\n\n    useEffect(() => {\n        if (winner) handleCount();\n    }, [winner])\n\n    return (\n        <>\n            <Header\n                selected={selected}\n                handleReset={handleReset}\n            />\n\n            <Container\n                list={list}\n                winnerState={winnerState}\n                cellsSelected={cellsSelected}\n                handleClick={handleClick}\n            />\n\n            <Footer\n                counter={counter}\n            />\n\n            { winner && <ModalWinner handleReset={ handleReset } winner={ winner } /> }\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}